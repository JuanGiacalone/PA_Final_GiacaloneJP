{"message":"can't compare `()` with `char`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":724,"byte_end":726,"line_start":29,"line_end":29,"column_start":31,"column_end":33,"is_primary":true,"text":[{"text":"    if let opc = read!(\"{} \") == 'f'","highlight_start":31,"highlight_end":33}],"label":"no implementation for `() == char`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `PartialEq<char>` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: can't compare `()` with `char`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    if let opc = read!(\"{} \") == 'f'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno implementation for `() == char`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `PartialEq<char>` is not implemented for `()`\u001b[0m\n\n"}
{"message":"`()` doesn't implement `std::fmt::Display`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4206,"byte_end":4222,"line_start":142,"line_end":142,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":38,"highlight_end":54}],"label":"`()` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":6512,"byte_end":6546,"line_start":211,"line_end":211,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        format_args!($pattern, $($arg),*);","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":5151,"byte_end":5220,"line_start":176,"line_end":176,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4933,"byte_end":5035,"line_start":172,"line_end":172,"column_start":9,"column_end":111,"is_primary":false,"text":[{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":9,"highlight_end":111}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4181,"byte_end":4224,"line_start":142,"line_end":142,"column_start":13,"column_end":56,"is_primary":false,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":13,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":6674,"byte_end":6701,"line_start":219,"line_end":219,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":711,"byte_end":723,"line_start":29,"line_end":29,"column_start":18,"column_end":30,"is_primary":false,"text":[{"text":"    if let opc = read!(\"{} \") == 'f'","highlight_start":18,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":6624,"byte_end":6720,"line_start":217,"line_end":221,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":19},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":3995,"byte_end":4526,"line_start":137,"line_end":153,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4832,"byte_end":6557,"line_start":169,"line_end":213,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4832,"byte_end":6557,"line_start":169,"line_end":213,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4832,"byte_end":6557,"line_start":169,"line_end":213,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":{"file_name":"/rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/macros/mod.rs","byte_start":25563,"byte_end":25717,"line_start":766,"line_end":769,"column_start":5,"column_end":6,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Display` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Display::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `()` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    if let opc = read!(\"{} \") == 'f'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`()` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Display` is not implemented for `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::fmt::Display::fmt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`()` doesn't implement `std::fmt::Display`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4206,"byte_end":4222,"line_start":142,"line_end":142,"column_start":38,"column_end":54,"is_primary":true,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":38,"highlight_end":54}],"label":"`()` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":5044,"byte_end":5078,"line_start":173,"line_end":173,"column_start":9,"column_end":43,"is_primary":false,"text":[{"text":"        format_args!($pattern, $($arg),*);","highlight_start":9,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4181,"byte_end":4224,"line_start":142,"line_end":142,"column_start":13,"column_end":56,"is_primary":false,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":13,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":6674,"byte_end":6701,"line_start":219,"line_end":219,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":711,"byte_end":723,"line_start":29,"line_end":29,"column_start":18,"column_end":30,"is_primary":false,"text":[{"text":"    if let opc = read!(\"{} \") == 'f'","highlight_start":18,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":6624,"byte_end":6720,"line_start":217,"line_end":221,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":19},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":3995,"byte_end":4526,"line_start":137,"line_end":153,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4832,"byte_end":6557,"line_start":169,"line_end":213,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"format_args!","def_site_span":{"file_name":"/rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/macros/mod.rs","byte_start":25563,"byte_end":25717,"line_start":766,"line_end":769,"column_start":5,"column_end":6,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `std::fmt::Display` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by `std::fmt::Display::fmt`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `()` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    if let opc = read!(\"{} \") == 'f'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`()` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `std::fmt::Display` is not implemented for `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required by `std::fmt::Display::fmt`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `(): FromStr` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function: Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function: It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":6105,"byte_end":6118,"line_start":199,"line_end":199,"column_start":67,"column_end":80,"is_primary":true,"text":[{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":67,"highlight_end":80}],"label":"the trait `FromStr` is not implemented for `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":5151,"byte_end":5220,"line_start":176,"line_end":176,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4933,"byte_end":5035,"line_start":172,"line_end":172,"column_start":9,"column_end":111,"is_primary":false,"text":[{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":9,"highlight_end":111}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4181,"byte_end":4224,"line_start":142,"line_end":142,"column_start":13,"column_end":56,"is_primary":false,"text":[{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":13,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":6674,"byte_end":6701,"line_start":219,"line_end":219,"column_start":9,"column_end":36,"is_primary":false,"text":[{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":9,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":711,"byte_end":723,"line_start":29,"line_end":29,"column_start":18,"column_end":30,"is_primary":false,"text":[{"text":"    if let opc = read!(\"{} \") == 'f'","highlight_start":18,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"read!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":6624,"byte_end":6720,"line_start":217,"line_end":221,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! read(","highlight_start":1,"highlight_end":19},{"text":"    ($($arg:tt)*) => {","highlight_start":1,"highlight_end":23},{"text":"        $crate::try_read!($($arg)*).unwrap()","highlight_start":1,"highlight_end":45},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_read!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":3995,"byte_end":4526,"line_start":137,"line_end":153,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_read(","highlight_start":1,"highlight_end":23},{"text":"    () => { $crate::try_read!(\"{}\") };","highlight_start":1,"highlight_end":39},{"text":"    ($text:expr) => {{","highlight_start":1,"highlight_end":23},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($text, __try_read_var__);","highlight_start":1,"highlight_end":56},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    ($text:expr, $input:expr) => {{","highlight_start":1,"highlight_end":36},{"text":"        (|| -> std::result::Result<_, $crate::Error> {","highlight_start":1,"highlight_end":55},{"text":"            let __try_read_var__;","highlight_start":1,"highlight_end":34},{"text":"            $crate::try_scan!($input => $text, __try_read_var__);","highlight_start":1,"highlight_end":66},{"text":"            Ok(__try_read_var__)","highlight_start":1,"highlight_end":33},{"text":"        })()","highlight_start":1,"highlight_end":13},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4832,"byte_end":6557,"line_start":169,"line_end":213,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4832,"byte_end":6557,"line_start":169,"line_end":213,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::try_scan!","def_site_span":{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":4832,"byte_end":6557,"line_start":169,"line_end":213,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! try_scan(","highlight_start":1,"highlight_end":23},{"text":"    ($pattern:expr, $($arg:expr),*) => {","highlight_start":1,"highlight_end":41},{"text":"        use ::std::io::Read;","highlight_start":1,"highlight_end":29},{"text":"        $crate::try_scan!(::std::io::stdin().bytes().map(std::result::Result::unwrap) => $pattern, $($arg),*);","highlight_start":1,"highlight_end":111},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":57},{"text":"        $crate::try_scan!(@impl question_mark; $input => $pattern, $($arg),*)","highlight_start":1,"highlight_end":78},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@question_mark: $($e:tt)+) => {{","highlight_start":1,"highlight_end":38},{"text":"        ($($e)+)?","highlight_start":1,"highlight_end":18},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@unwrap: $($e:tt)+) => {{","highlight_start":1,"highlight_end":31},{"text":"        ($($e)+).unwrap()","highlight_start":1,"highlight_end":26},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":"    (@impl $action:tt; $input:expr => $pattern:expr, $($arg:expr),*) => {{","highlight_start":1,"highlight_end":75},{"text":"        #![allow(clippy::try_err)]","highlight_start":1,"highlight_end":35},{"text":"        use $crate::{Error, match_next, parse_capture};","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // typesafe macros :)","highlight_start":1,"highlight_end":30},{"text":"        let pattern: &'static str = $pattern;","highlight_start":1,"highlight_end":46},{"text":"        let stdin: &mut Iterator<Item = u8> = &mut ($input);","highlight_start":1,"highlight_end":61},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let mut pattern = pattern.bytes();","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        $(","highlight_start":1,"highlight_end":11},{"text":"            $arg = loop {","highlight_start":1,"highlight_end":26},{"text":"                match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingMatch)) {","highlight_start":1,"highlight_end":95},{"text":"                    b'{' => match $crate::try_scan!(@$action: pattern.next().ok_or(Error::MissingClosingBrace)) {","highlight_start":1,"highlight_end":114},{"text":"                        b'{' => $crate::try_scan!(@$action: match_next(b'{', stdin)),","highlight_start":1,"highlight_end":86},{"text":"                        b'}' => break $crate::try_scan!(@$action: parse_capture(stringify!($arg), pattern.next(), stdin)),","highlight_start":1,"highlight_end":123},{"text":"                        _ => return $crate::try_scan!(@$action: Err(Error::MissingClosingBrace)),","highlight_start":1,"highlight_end":98},{"text":"                    },","highlight_start":1,"highlight_end":23},{"text":"                    c => $crate::try_scan!(@$action: match_next(c, stdin)),","highlight_start":1,"highlight_end":76},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            };","highlight_start":1,"highlight_end":15},{"text":"        )*","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        for c in pattern {","highlight_start":1,"highlight_end":27},{"text":"            $crate::try_scan!(@$action: match_next(c, stdin))","highlight_start":1,"highlight_end":62},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        format_args!($pattern, $($arg),*);","highlight_start":1,"highlight_end":43},{"text":"    }};","highlight_start":1,"highlight_end":8},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs","byte_start":2721,"byte_end":2728,"line_start":94,"line_end":94,"column_start":8,"column_end":15,"is_primary":false,"text":[{"text":"    T: FromStr,","highlight_start":8,"highlight_end":15}],"label":"required by this bound in `parse_capture`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `(): FromStr` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    if let opc = read!(\"{} \") == 'f'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `FromStr` is not implemented for `()`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/juan/.cargo/registry/src/github.com-1ecc6299db9ec823/text_io-0.1.8/src/lib.rs:94:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    T: FromStr,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by this bound in `parse_capture`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
